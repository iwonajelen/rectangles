{"version":3,"sources":["features/rectangles/models.ts","app/hooks.ts","features/utils.ts","features/rectangles/canvasSlice.ts","features/rectangles/Rectangle.tsx","features/rectangles/Canvas.tsx","features/styledComponents.ts","features/rectangles/CanvasContainer.tsx","features/rectangles/Playground.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Status","useAppSelector","useSelector","isValidData","data","project","items","some","item","Number","isInteger","width","height","rotation","EdgeType","emptyProjectData","id","name","emptyError","error","message","initialState","projectData","status","idle","fetchProjectById","createAsyncThunk","projectId","thunkAPI","a","fetch","response","ok","rejectWithValue","statusText","json","initAndFetch","_","dispatch","canvasSlice","createSlice","reducers","updateProject","state","action","payload","extraReducers","builder","addCase","pending","loading","fulfilled","rejected","selectProject","actions","canvas","selectStatus","selectError","getBoundEdge","rectangle","type","Math","floor","cos","abs","PI","sin","CanvasRectangle","props","rectData","x","y","color","getTranslate","boundaryRectangle","fgColor","bgColor","substring","parseInt","getForegroundColorBasedOnBackground","fill","strokeWidth","stroke","transform","getRotation","cx","cy","r","Canvas","viewData","viewBox","setViewBox","map","StyledDiv","styled","div","CanvasDiv","StyledButton","button","StyledInput","input","StyledInputContainer","StyledPlaygroundDiv","CanvasContainer","useDispatch","useState","inputValue","setInputValue","to","style","display","justifyContent","placeholder","value","onChange","event","target","onClick","margin","fontWeight","Playground","setRotation","setWidth","setHeight","getValue","targetValue","minValue","maxValue","handleOnRotationChange","handleOnWidthChange","handleOnHeightChange","marginTop","fontSize","toFixed","min","max","step","App","className","exact","from","path","store","configureStore","reducer","canvasReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cdf5452b.chunk.js","sourcesContent":["\r\nexport interface ResponseError {  \r\n    error: number,\r\n    message: string\r\n}\r\n\r\nexport enum Status {\r\n    idle = 'idle',\r\n    loading = 'loading',\r\n    failed = 'failed'\r\n}\r\n\r\nexport interface ProjectResponse {\r\n    id: string,\r\n    name: string,\r\n    modified: number\r\n}\r\n\r\nexport interface ProjectData {\r\n    id: string\r\n    project: Project\r\n}\r\n\r\nexport interface Project {\r\n    id: string,\r\n    name: string,\r\n    width: number,\r\n    height: number,\r\n    items: Array<Rectangle>\r\n}\r\n\r\nexport interface Rectangle {\r\n    id: string,\r\n    color: string,\r\n    rotation: number,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n};\r\n\r\nexport interface CanvasState {\r\n    projectData: ProjectData,\r\n    status: Status,\r\n    error: ResponseError | undefined\r\n};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ProjectData, Rectangle } from \"./rectangles/models\";\r\n\r\nexport const getForegroundColorBasedOnBackground = (bgColor: string): string => {\r\n    var color = bgColor.substring(1, 7);\r\n    var red = parseInt(color.substring(0, 2), 16);\r\n    var green = parseInt(color.substring(2, 4), 16);\r\n    var blue = parseInt(color.substring(4, 6), 16);\r\n    return (((red * 0.299) + (green * 0.587) + (blue * 0.114)) > 186) ?\r\n      \"#000000\" : \"#ffffff\";\r\n}\r\n\r\nexport const isValidData = (data: ProjectData): boolean => {\r\n  return data.project && data.project.items && !data.project.items.some((item: Rectangle) => {\r\n    return !Number.isInteger(item.width) || \r\n      !Number.isInteger(item.height) || \r\n      !Number.isInteger(item.rotation);\r\n  });\r\n}","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { isValidData } from \"../utils\";\r\nimport { ProjectData, ProjectResponse, ResponseError, Status, CanvasState } from \"./models\";\r\n\r\nconst emptyProjectData = {\r\n    id: '',\r\n    project: {\r\n        id: '',\r\n        name: '',\r\n        width: 0,\r\n        height: 0,\r\n        items: []\r\n    }\r\n};\r\n\r\nconst emptyError = {\r\n    error: 0,\r\n    message: ''\r\n}\r\n\r\nconst initialState: CanvasState = {\r\n    projectData: emptyProjectData,\r\n    status: Status.idle,\r\n    error: emptyError\r\n};\r\n\r\nexport const fetchProjectById = createAsyncThunk<\r\n    ProjectData, \r\n    string,\r\n    {    \r\n        rejectValue: ResponseError\r\n    }>(  \r\n    'projects/fetchById', \r\n    async (projectId, thunkAPI) => {\r\n        const response = await fetch(`https://recruitment01.vercel.app/api/project/${projectId}`);\r\n        if (!response.ok) {\r\n            return thunkAPI.rejectWithValue({error: 1, message: response.statusText});\r\n        }\r\n        const data = (await response.json()) as ProjectData;\r\n        if (!isValidData(data)) {\r\n            return thunkAPI.rejectWithValue({error: 1, message: 'Invalid project data'});\r\n        }\r\n        return data;\r\n    }\r\n)\r\n\r\nexport const initProject = createAsyncThunk(  \r\n    'projects/init',  \r\n    async () => {    \r\n        const response = await fetch(`https://recruitment01.vercel.app/api/init`);   \r\n        return (await response.json()) as ProjectResponse;\r\n    }\r\n)\r\n\r\nexport const initAndFetch = createAsyncThunk(  \r\n    'projects/initAndFetch',\r\n    async (_, thunkAPI) => {    \r\n        try {\r\n            const response = await fetch(`https://recruitment01.vercel.app/api/init`);\r\n            const data = (await response.json()) as ProjectResponse;\r\n            thunkAPI.dispatch(fetchProjectById(data.id));\r\n        } catch (error) {\r\n            return thunkAPI.rejectWithValue(error);\r\n        }\r\n    }\r\n)\r\n\r\nexport const canvasSlice = createSlice({\r\n    name: 'canvas',\r\n    initialState,\r\n    reducers: {\r\n      updateProject: (state, action: PayloadAction<ProjectData>) => {\r\n        state.projectData = action.payload;\r\n      },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n          .addCase(fetchProjectById.pending, (state) => {\r\n            state.status = Status.loading;\r\n            state.error = emptyError;\r\n          })\r\n          .addCase(fetchProjectById.fulfilled, (state, action) => {\r\n            state.status = Status.idle;\r\n            state.error = emptyError;\r\n            state.projectData = action.payload;\r\n          })\r\n          .addCase(fetchProjectById.rejected, (state, action) => {\r\n            state.error = action.payload;\r\n            state.projectData = {...emptyProjectData};\r\n          });\r\n      },\r\n});\r\n\r\nexport const { updateProject } = canvasSlice.actions;\r\n\r\nexport const selectProject = (state: RootState) => state.canvas.projectData.project;\r\nexport const selectStatus = (state: RootState) => state.canvas.status;\r\nexport const selectError = (state: RootState) => state.canvas.error;\r\n\r\nexport default canvasSlice.reducer;","import React from \"react\";\r\nimport { getForegroundColorBasedOnBackground } from \"../utils\";\r\nimport { Rectangle } from \"./models\";\r\n\r\nexport const enum EdgeType {\r\n    width = 'width',\r\n    height = 'height'\r\n}\r\n\r\nexport const getBoundEdge = (rectangle: Rectangle, type: EdgeType): number => {\r\n    const rotation = rectangle.rotation - 360*Math.floor(rectangle.rotation/360);\r\n    const width = rectangle.width;\r\n    const height = rectangle.height;\r\n    const cos = Math.abs(Math.cos(Math.PI * rotation / 180));\r\n    const sin = Math.abs(Math.sin(Math.PI * rotation / 180));\r\n    \r\n    return type === EdgeType.height ? width*sin + height*cos : width*cos + height*sin;\r\n}\r\n\r\nexport function CanvasRectangle(props: {rectData: Rectangle}) {\r\n    const {x, y, width, height, rotation, color} = props.rectData;\r\n\r\n    const getRotation = (rotation: number): string => {\r\n        return `rotate(${rotation})`;\r\n    }\r\n\r\n    const getTranslate = (x: number, y: number) => {\r\n        return `translate(${x}, ${y})`;\r\n    }\r\n\r\n    const getTransform = (rectangle: Rectangle): string => {\r\n        return `${getTranslate(rectangle.x, rectangle.y)} ${getRotation(rectangle.rotation)} ${getTranslate(-rectangle.width/2, -rectangle.height/2)}`;\r\n    }\r\n\r\n    const boundaryRectangle = {\r\n        ...props.rectData,\r\n        width: getBoundEdge(props.rectData, EdgeType.width),\r\n        height: getBoundEdge(props.rectData, EdgeType.height)\r\n    }\r\n\r\n    const fgColor = getForegroundColorBasedOnBackground(color);\r\n\r\n    return (\r\n        <g>\r\n            <rect \r\n                fill=\"none\" \r\n                strokeWidth=\"2\" \r\n                stroke=\"red\" \r\n                x={x}\r\n                y={y}\r\n                width={boundaryRectangle.width} \r\n                height={boundaryRectangle.height}\r\n                transform={getTranslate(-boundaryRectangle.width/2, -boundaryRectangle.height/2)}/>\r\n            <rect fill={color} width={width} height={height} transform={getTransform(props.rectData)}/>\r\n            <circle cx={x} cy={y} r=\"4\" fill={fgColor}></circle>\r\n            <text x={x+10} y={y+10} fill={fgColor}>{rotation}&deg;</text>\r\n        </g>\r\n    );\r\n}","import React from \"react\";\r\nimport { Rectangle } from \"./models\";\r\nimport { CanvasRectangle } from \"./Rectangle\";\r\n\r\nexport function Canvas(props: {items: Array<Rectangle>, viewData: { width: number, height: number}}) {\r\n    const {width, height} = props.viewData;\r\n\r\n    const setViewBox = (width: number, height: number): string => {\r\n        return `0 0 ${width} ${height}`;\r\n    }\r\n\r\n    return (\r\n        <svg viewBox={setViewBox(width, height)} width=\"100%\" height=\"100%\">\r\n            {props.items.map((item: Rectangle) => <CanvasRectangle key={item.id} rectData={item}/>)}\r\n        </svg>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledDiv = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nexport const CanvasDiv = styled.div`\r\n    width: auto;\r\n    height: 70%;\r\n    background: white;\r\n    border: 1px solid #777;\r\n    box-shadow: 0 0 20px #ddd;\r\n    margin: 1em;\r\n\r\n    @media (max-width: 768px) {\r\n        height: 50%;\r\n    }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    padding: 10px 24px;\r\n    background: #55aa88;\r\n    border: none;\r\n    color: black;\r\n    border-radius: 0 7px 7px 0;\r\n    font-size: 1.1em;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        opacity: 0.8;\r\n    }\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n    padding: 10px;\r\n    border: 1px #888 solid;\r\n    border-radius: 7px 0 0 7px;\r\n`;\r\n\r\nexport const StyledInputContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    width: 50%;\r\n    margin: 0 auto;\r\n\r\n    @media (max-width: 768px) {\r\n        margin: 0;\r\n        width: 100%;\r\n    \r\n        & input[type=\"number\"] {\r\n            width: 30%;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const StyledPlaygroundDiv = styled.div`\r\n    background: white;\r\n    margin: 2em auto;\r\n    width: 80vw;\r\n    height: 60vh;\r\n    border: 1px solid #777;\r\n    box-shadow: 0 0 20px #ddd;\r\n\r\n    @media (max-width: 768px) {\r\n        & h3 {\r\n            margin: 0.3em auto;\r\n        }\r\n    }\r\n`;","import React, { useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { fetchProjectById, initAndFetch, selectError, selectProject, selectStatus } from \"./canvasSlice\";\r\nimport { Canvas } from \"./Canvas\";\r\nimport { Status } from \"./models\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CanvasDiv, StyledButton, StyledDiv, StyledInput } from \"../styledComponents\";\r\n\r\nexport function CanvasContainer() {\r\n    const project = useAppSelector(selectProject);\r\n    const status = useAppSelector(selectStatus);\r\n    const error = useAppSelector(selectError);\r\n    const dispatch = useAppDispatch();\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleClick = () => {\r\n        if (inputValue) {\r\n            dispatch(fetchProjectById(inputValue));\r\n        } else {\r\n            dispatch(initAndFetch());\r\n        }\r\n    }\r\n\r\n    const canvasContent = () => {\r\n        if (status === Status.loading) {\r\n            return <h2>Loading...</h2>\r\n        } else {\r\n            return (\r\n                <>\r\n                    <span style={{margin: '10px auto', fontWeight: 700}}>{project.name}</span>\r\n                    <CanvasDiv>\r\n                        <Canvas items={project.items} viewData={{width: project.width, height: project.height}}></Canvas>\r\n                    </CanvasDiv>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <Link to=\"/playground\">Playground</Link>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                <StyledInput type=\"text\" placeholder=\"enter project id\" value={inputValue} onChange={(event) => setInputValue(event.target.value)}></StyledInput>\r\n                <StyledButton onClick={handleClick}>Fetch</StyledButton>\r\n            </div>\r\n            {error && error.message ? <h2 style={{color: 'red'}}>{error.message}</h2> : canvasContent()}\r\n        </StyledDiv>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { StyledInput, StyledInputContainer, StyledPlaygroundDiv } from \"../styledComponents\";\r\nimport { Rectangle } from \"./models\";\r\nimport { CanvasRectangle, EdgeType, getBoundEdge } from \"./Rectangle\";\r\n\r\nconst MIN_LENGTH = 100;\r\nconst MAX_LENGTH = 400;\r\nconst MIN_ROTATION = 0;\r\nconst MAX_ROTATION = 360;\r\n\r\nexport function Playground() {\r\n    const [rotation, setRotation] = useState(0);\r\n    const [width, setWidth] = useState(200);\r\n    const [height, setHeight] = useState(300);\r\n\r\n    const getValue = (targetValue: number, minValue: number, maxValue: number): number => {\r\n        if (!targetValue || targetValue < minValue) {\r\n            return minValue;\r\n        } else if (targetValue > maxValue) {\r\n            return maxValue;\r\n        } else {\r\n            return targetValue;\r\n        }\r\n    }\r\n\r\n    const handleOnRotationChange = (event: any) => {\r\n        setRotation(getValue(event.target.value, MIN_ROTATION, MAX_ROTATION));\r\n    }\r\n\r\n    const handleOnWidthChange = (event: any) => {\r\n        setWidth(getValue(event.target.value, MIN_LENGTH, MAX_LENGTH));\r\n    }\r\n\r\n    const handleOnHeightChange = (event: any) => {\r\n        setHeight(getValue(event.target.value, MIN_LENGTH, MAX_LENGTH));\r\n    }\r\n\r\n    const rectangle: Rectangle = {\r\n        id: \"1\",\r\n        width: width,\r\n        height: height,\r\n        x: 300,\r\n        y: 300,\r\n        color: '#33ca90',\r\n        rotation: rotation\r\n    }\r\n\r\n    const boundaryRectangle = {\r\n        ...rectangle,\r\n        width: getBoundEdge(rectangle, EdgeType.width),\r\n        height: getBoundEdge(rectangle, EdgeType.height)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Link style={{marginTop: \"20px\"}} to=\"/\">Back</Link>\r\n        <StyledPlaygroundDiv>\r\n            <svg viewBox=\"0 0 600 600\" width=\"100%\" height=\"100%\">\r\n                <CanvasRectangle rectData={rectangle}></CanvasRectangle>\r\n                <text x=\"-500\" y=\"100\" fontSize=\"1.4em\" fill=\"black\">border width</text>\r\n                <text x=\"-500\" y=\"130\" fontSize=\"1.2em\" fill=\"black\">width*cos(alpha) + height*sin(alpha)</text>\r\n                <text x=\"-300\" y=\"100\" fontSize=\"1.2em\" fill=\"red\">{boundaryRectangle.width.toFixed(2)}</text>\r\n                <text x=\"-500\" y=\"210\" fontSize=\"1.4em\" fill=\"black\">border height</text>\r\n                <text x=\"-500\" y=\"240\" fontSize=\"1.2em\" fill=\"black\">width*sin(alpha) + height*cos(alpha)</text>\r\n                <text x=\"-300\" y=\"210\" fontSize=\"1.2em\" fill=\"red\">{boundaryRectangle.height.toFixed(2)}</text>\r\n            </svg>\r\n                <h3>Rotation</h3>\r\n            <StyledInputContainer>\r\n                <input type=\"range\" id=\"rotation\" name=\"rotation\" min=\"0\" max=\"360\" value={rotation} step=\"1\" onChange={handleOnRotationChange}></input>\r\n                <StyledInput type=\"number\" value={rotation} min=\"0\" max=\"360\" onChange={handleOnRotationChange}></StyledInput>\r\n            </StyledInputContainer>\r\n                <h3>Width</h3>\r\n            <StyledInputContainer>\r\n                <input type=\"range\" id=\"width\" name=\"width\" min=\"100\" max=\"400\" value={width} step=\"1\" onChange={handleOnWidthChange}></input>\r\n                <StyledInput type=\"number\" value={width}  min=\"100\" max=\"400\" onChange={handleOnWidthChange}></StyledInput>\r\n            </StyledInputContainer> \r\n                <h3>Height</h3>\r\n            <StyledInputContainer>\r\n                <input type=\"range\" id=\"height\" name=\"height\" min=\"100\" max=\"400\" value={height} step=\"1\" onChange={handleOnHeightChange}></input>\r\n                <StyledInput type=\"number\" value={height} min=\"100\" max=\"400\" onChange={handleOnHeightChange}></StyledInput>\r\n            </StyledInputContainer>\r\n        </StyledPlaygroundDiv>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { CanvasContainer } from './features/rectangles/CanvasContainer';\nimport { Playground } from './features/rectangles/Playground';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n            <Redirect exact from=\"/\" to=\"/rectangles\" />\n            <Route path=\"/playground\">\n              <Playground />\n            </Route>\n            <Route path=\"/rectangles\">\n              <CanvasContainer />\n            </Route>\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport canvasReducer from '../features/rectangles/canvasSlice';\n\nexport const store = configureStore({\n  reducer: {\n    canvas: canvasReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}